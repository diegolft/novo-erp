const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîí Executando migra√ß√£o segura...');

// Carregar vari√°veis de ambiente
const envPath = path.join(__dirname, '..', '.env');
require('dotenv').config({ path: envPath });

// Verificar se DATABASE_URL est√° definida
if (!process.env.DATABASE_URL) {
  console.log('‚ùå DATABASE_URL n√£o encontrada no arquivo .env');
  console.log('üìù Certifique-se de que o arquivo .env existe e cont√©m DATABASE_URL');
  console.log('üí° Exemplo: DATABASE_URL=postgresql://usuario:senha@localhost:5432/banco');
  process.exit(1);
}

console.log('‚úÖ Vari√°veis de ambiente carregadas');
console.log('üîó Conectando ao banco:', process.env.DATABASE_URL.replace(/\/\/.*@/, '//***@'));

// Criar arquivo de configura√ß√£o tempor√°rio com as credenciais
const tempConfig = {
  driver: "pg",
  out: "./drizzle",
  schema: "./src/infrastructure/database/schema.ts",
  dbCredentials: {
    connectionString: process.env.DATABASE_URL
  }
};

const tempConfigPath = path.join(__dirname, '..', 'drizzle.temp.json');

try {
  // Escrever arquivo tempor√°rio
  fs.writeFileSync(tempConfigPath, JSON.stringify(tempConfig, null, 2));
  
  // Executar migra√ß√£o com arquivo tempor√°rio
  console.log('üìä Executando migra√ß√£o...');
  execSync(`npx drizzle-kit push:pg --config=${tempConfigPath}`, { 
    stdio: 'inherit'
  });
  
  console.log('‚úÖ Migra√ß√£o executada com sucesso!');
} catch (error) {
  console.error('‚ùå Erro ao executar migra√ß√£o:', error.message);
  process.exit(1);
} finally {
  // Remover arquivo tempor√°rio (importante para seguran√ßa!)
  if (fs.existsSync(tempConfigPath)) {
    fs.unlinkSync(tempConfigPath);
    console.log('üóëÔ∏è Arquivo tempor√°rio removido');
  }
}
